//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: Vision Pro/VideoStream/VideoStream/video_stream.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `Video_VideoStreamClient`, then call methods of this protocol to make API calls.
internal protocol Video_VideoStreamClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Video_VideoStreamClientInterceptorFactoryProtocol? { get }

  func sendFrame(
    callOptions: CallOptions?
  ) -> ClientStreamingCall<Video_Frame, Video_StreamAck>
}

extension Video_VideoStreamClientProtocol {
  internal var serviceName: String {
    return "video.VideoStream"
  }

  /// Client streaming call to SendFrame
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata, status and response.
  internal func sendFrame(
    callOptions: CallOptions? = nil
  ) -> ClientStreamingCall<Video_Frame, Video_StreamAck> {
    return self.makeClientStreamingCall(
      path: Video_VideoStreamClientMetadata.Methods.sendFrame.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendFrameInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Video_VideoStreamClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Video_VideoStreamNIOClient")
internal final class Video_VideoStreamClient: Video_VideoStreamClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Video_VideoStreamClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Video_VideoStreamClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the video.VideoStream service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Video_VideoStreamClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Video_VideoStreamNIOClient: Video_VideoStreamClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Video_VideoStreamClientInterceptorFactoryProtocol?

  /// Creates a client for the video.VideoStream service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Video_VideoStreamClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Video_VideoStreamAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Video_VideoStreamClientInterceptorFactoryProtocol? { get }

  func makeSendFrameCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncClientStreamingCall<Video_Frame, Video_StreamAck>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Video_VideoStreamAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Video_VideoStreamClientMetadata.serviceDescriptor
  }

  internal var interceptors: Video_VideoStreamClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeSendFrameCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncClientStreamingCall<Video_Frame, Video_StreamAck> {
    return self.makeAsyncClientStreamingCall(
      path: Video_VideoStreamClientMetadata.Methods.sendFrame.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendFrameInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Video_VideoStreamAsyncClientProtocol {
  internal func sendFrame<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Video_StreamAck where RequestStream: Sequence, RequestStream.Element == Video_Frame {
    return try await self.performAsyncClientStreamingCall(
      path: Video_VideoStreamClientMetadata.Methods.sendFrame.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendFrameInterceptors() ?? []
    )
  }

  internal func sendFrame<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) async throws -> Video_StreamAck where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Video_Frame {
    return try await self.performAsyncClientStreamingCall(
      path: Video_VideoStreamClientMetadata.Methods.sendFrame.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSendFrameInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Video_VideoStreamAsyncClient: Video_VideoStreamAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Video_VideoStreamClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Video_VideoStreamClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Video_VideoStreamClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'sendFrame'.
  func makeSendFrameInterceptors() -> [ClientInterceptor<Video_Frame, Video_StreamAck>]
}

internal enum Video_VideoStreamClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "VideoStream",
    fullName: "video.VideoStream",
    methods: [
      Video_VideoStreamClientMetadata.Methods.sendFrame,
    ]
  )

  internal enum Methods {
    internal static let sendFrame = GRPCMethodDescriptor(
      name: "SendFrame",
      path: "/video.VideoStream/SendFrame",
      type: GRPCCallType.clientStreaming
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol Video_VideoStreamProvider: CallHandlerProvider {
  var interceptors: Video_VideoStreamServerInterceptorFactoryProtocol? { get }

  func sendFrame(context: UnaryResponseCallContext<Video_StreamAck>) -> EventLoopFuture<(StreamEvent<Video_Frame>) -> Void>
}

extension Video_VideoStreamProvider {
  internal var serviceName: Substring {
    return Video_VideoStreamServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SendFrame":
      return ClientStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Video_Frame>(),
        responseSerializer: ProtobufSerializer<Video_StreamAck>(),
        interceptors: self.interceptors?.makeSendFrameInterceptors() ?? [],
        observerFactory: self.sendFrame(context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Video_VideoStreamAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Video_VideoStreamServerInterceptorFactoryProtocol? { get }

  func sendFrame(
    requestStream: GRPCAsyncRequestStream<Video_Frame>,
    context: GRPCAsyncServerCallContext
  ) async throws -> Video_StreamAck
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Video_VideoStreamAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Video_VideoStreamServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Video_VideoStreamServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Video_VideoStreamServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "SendFrame":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Video_Frame>(),
        responseSerializer: ProtobufSerializer<Video_StreamAck>(),
        interceptors: self.interceptors?.makeSendFrameInterceptors() ?? [],
        wrapping: { try await self.sendFrame(requestStream: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Video_VideoStreamServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'sendFrame'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSendFrameInterceptors() -> [ServerInterceptor<Video_Frame, Video_StreamAck>]
}

internal enum Video_VideoStreamServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "VideoStream",
    fullName: "video.VideoStream",
    methods: [
      Video_VideoStreamServerMetadata.Methods.sendFrame,
    ]
  )

  internal enum Methods {
    internal static let sendFrame = GRPCMethodDescriptor(
      name: "SendFrame",
      path: "/video.VideoStream/SendFrame",
      type: GRPCCallType.clientStreaming
    )
  }
}
